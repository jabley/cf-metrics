// This file was generated by counterfeiter
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actors/v2actions"
	"code.cloudfoundry.org/cli/commands/v2"
)

type FakeHelpActor struct {
	CommandInfoByNameStub        func(interface{}, string) (v2actions.CommandInfo, error)
	commandInfoByNameMutex       sync.RWMutex
	commandInfoByNameArgsForCall []struct {
		arg1 interface{}
		arg2 string
	}
	commandInfoByNameReturns struct {
		result1 v2actions.CommandInfo
		result2 error
	}
	CommandInfosStub        func(interface{}) map[string]v2actions.CommandInfo
	commandInfosMutex       sync.RWMutex
	commandInfosArgsForCall []struct {
		arg1 interface{}
	}
	commandInfosReturns struct {
		result1 map[string]v2actions.CommandInfo
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHelpActor) CommandInfoByName(arg1 interface{}, arg2 string) (v2actions.CommandInfo, error) {
	fake.commandInfoByNameMutex.Lock()
	fake.commandInfoByNameArgsForCall = append(fake.commandInfoByNameArgsForCall, struct {
		arg1 interface{}
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CommandInfoByName", []interface{}{arg1, arg2})
	fake.commandInfoByNameMutex.Unlock()
	if fake.CommandInfoByNameStub != nil {
		return fake.CommandInfoByNameStub(arg1, arg2)
	} else {
		return fake.commandInfoByNameReturns.result1, fake.commandInfoByNameReturns.result2
	}
}

func (fake *FakeHelpActor) CommandInfoByNameCallCount() int {
	fake.commandInfoByNameMutex.RLock()
	defer fake.commandInfoByNameMutex.RUnlock()
	return len(fake.commandInfoByNameArgsForCall)
}

func (fake *FakeHelpActor) CommandInfoByNameArgsForCall(i int) (interface{}, string) {
	fake.commandInfoByNameMutex.RLock()
	defer fake.commandInfoByNameMutex.RUnlock()
	return fake.commandInfoByNameArgsForCall[i].arg1, fake.commandInfoByNameArgsForCall[i].arg2
}

func (fake *FakeHelpActor) CommandInfoByNameReturns(result1 v2actions.CommandInfo, result2 error) {
	fake.CommandInfoByNameStub = nil
	fake.commandInfoByNameReturns = struct {
		result1 v2actions.CommandInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeHelpActor) CommandInfos(arg1 interface{}) map[string]v2actions.CommandInfo {
	fake.commandInfosMutex.Lock()
	fake.commandInfosArgsForCall = append(fake.commandInfosArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("CommandInfos", []interface{}{arg1})
	fake.commandInfosMutex.Unlock()
	if fake.CommandInfosStub != nil {
		return fake.CommandInfosStub(arg1)
	} else {
		return fake.commandInfosReturns.result1
	}
}

func (fake *FakeHelpActor) CommandInfosCallCount() int {
	fake.commandInfosMutex.RLock()
	defer fake.commandInfosMutex.RUnlock()
	return len(fake.commandInfosArgsForCall)
}

func (fake *FakeHelpActor) CommandInfosArgsForCall(i int) interface{} {
	fake.commandInfosMutex.RLock()
	defer fake.commandInfosMutex.RUnlock()
	return fake.commandInfosArgsForCall[i].arg1
}

func (fake *FakeHelpActor) CommandInfosReturns(result1 map[string]v2actions.CommandInfo) {
	fake.CommandInfosStub = nil
	fake.commandInfosReturns = struct {
		result1 map[string]v2actions.CommandInfo
	}{result1}
}

func (fake *FakeHelpActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commandInfoByNameMutex.RLock()
	defer fake.commandInfoByNameMutex.RUnlock()
	fake.commandInfosMutex.RLock()
	defer fake.commandInfosMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHelpActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.HelpActor = new(FakeHelpActor)
