// This file was generated by counterfeiter
package uifakes

import (
	"sync"

	"code.cloudfoundry.org/cli/commands/ui"
	"github.com/nicksnyder/go-i18n/i18n"
)

type FakeTranslatableError struct {
	ErrorStub        func() string
	errorMutex       sync.RWMutex
	errorArgsForCall []struct{}
	errorReturns     struct {
		result1 string
	}
	SetTranslationStub        func(i18n.TranslateFunc) error
	setTranslationMutex       sync.RWMutex
	setTranslationArgsForCall []struct {
		arg1 i18n.TranslateFunc
	}
	setTranslationReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTranslatableError) Error() string {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct{}{})
	fake.recordInvocation("Error", []interface{}{})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		return fake.ErrorStub()
	} else {
		return fake.errorReturns.result1
	}
}

func (fake *FakeTranslatableError) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeTranslatableError) ErrorReturns(result1 string) {
	fake.ErrorStub = nil
	fake.errorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTranslatableError) SetTranslation(arg1 i18n.TranslateFunc) error {
	fake.setTranslationMutex.Lock()
	fake.setTranslationArgsForCall = append(fake.setTranslationArgsForCall, struct {
		arg1 i18n.TranslateFunc
	}{arg1})
	fake.recordInvocation("SetTranslation", []interface{}{arg1})
	fake.setTranslationMutex.Unlock()
	if fake.SetTranslationStub != nil {
		return fake.SetTranslationStub(arg1)
	} else {
		return fake.setTranslationReturns.result1
	}
}

func (fake *FakeTranslatableError) SetTranslationCallCount() int {
	fake.setTranslationMutex.RLock()
	defer fake.setTranslationMutex.RUnlock()
	return len(fake.setTranslationArgsForCall)
}

func (fake *FakeTranslatableError) SetTranslationArgsForCall(i int) i18n.TranslateFunc {
	fake.setTranslationMutex.RLock()
	defer fake.setTranslationMutex.RUnlock()
	return fake.setTranslationArgsForCall[i].arg1
}

func (fake *FakeTranslatableError) SetTranslationReturns(result1 error) {
	fake.SetTranslationStub = nil
	fake.setTranslationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTranslatableError) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.setTranslationMutex.RLock()
	defer fake.setTranslationMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTranslatableError) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ui.TranslatableError = new(FakeTranslatableError)
