// This file was generated by counterfeiter
package logsfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/cf/api/logs"
	"github.com/cloudfoundry/sonde-go/events"
)

type FakeNoaaConsumer struct {
	TailingLogsWithoutReconnectStub        func(string, string) (<-chan *events.LogMessage, <-chan error)
	tailingLogsWithoutReconnectMutex       sync.RWMutex
	tailingLogsWithoutReconnectArgsForCall []struct {
		arg1 string
		arg2 string
	}
	tailingLogsWithoutReconnectReturns struct {
		result1 <-chan *events.LogMessage
		result2 <-chan error
	}
	RecentLogsStub        func(appGUID string, authToken string) ([]*events.LogMessage, error)
	recentLogsMutex       sync.RWMutex
	recentLogsArgsForCall []struct {
		appGUID   string
		authToken string
	}
	recentLogsReturns struct {
		result1 []*events.LogMessage
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	SetOnConnectCallbackStub        func(cb func())
	setOnConnectCallbackMutex       sync.RWMutex
	setOnConnectCallbackArgsForCall []struct {
		cb func()
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNoaaConsumer) TailingLogsWithoutReconnect(arg1 string, arg2 string) (<-chan *events.LogMessage, <-chan error) {
	fake.tailingLogsWithoutReconnectMutex.Lock()
	fake.tailingLogsWithoutReconnectArgsForCall = append(fake.tailingLogsWithoutReconnectArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("TailingLogsWithoutReconnect", []interface{}{arg1, arg2})
	fake.tailingLogsWithoutReconnectMutex.Unlock()
	if fake.TailingLogsWithoutReconnectStub != nil {
		return fake.TailingLogsWithoutReconnectStub(arg1, arg2)
	} else {
		return fake.tailingLogsWithoutReconnectReturns.result1, fake.tailingLogsWithoutReconnectReturns.result2
	}
}

func (fake *FakeNoaaConsumer) TailingLogsWithoutReconnectCallCount() int {
	fake.tailingLogsWithoutReconnectMutex.RLock()
	defer fake.tailingLogsWithoutReconnectMutex.RUnlock()
	return len(fake.tailingLogsWithoutReconnectArgsForCall)
}

func (fake *FakeNoaaConsumer) TailingLogsWithoutReconnectArgsForCall(i int) (string, string) {
	fake.tailingLogsWithoutReconnectMutex.RLock()
	defer fake.tailingLogsWithoutReconnectMutex.RUnlock()
	return fake.tailingLogsWithoutReconnectArgsForCall[i].arg1, fake.tailingLogsWithoutReconnectArgsForCall[i].arg2
}

func (fake *FakeNoaaConsumer) TailingLogsWithoutReconnectReturns(result1 <-chan *events.LogMessage, result2 <-chan error) {
	fake.TailingLogsWithoutReconnectStub = nil
	fake.tailingLogsWithoutReconnectReturns = struct {
		result1 <-chan *events.LogMessage
		result2 <-chan error
	}{result1, result2}
}

func (fake *FakeNoaaConsumer) RecentLogs(appGUID string, authToken string) ([]*events.LogMessage, error) {
	fake.recentLogsMutex.Lock()
	fake.recentLogsArgsForCall = append(fake.recentLogsArgsForCall, struct {
		appGUID   string
		authToken string
	}{appGUID, authToken})
	fake.recordInvocation("RecentLogs", []interface{}{appGUID, authToken})
	fake.recentLogsMutex.Unlock()
	if fake.RecentLogsStub != nil {
		return fake.RecentLogsStub(appGUID, authToken)
	} else {
		return fake.recentLogsReturns.result1, fake.recentLogsReturns.result2
	}
}

func (fake *FakeNoaaConsumer) RecentLogsCallCount() int {
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	return len(fake.recentLogsArgsForCall)
}

func (fake *FakeNoaaConsumer) RecentLogsArgsForCall(i int) (string, string) {
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	return fake.recentLogsArgsForCall[i].appGUID, fake.recentLogsArgsForCall[i].authToken
}

func (fake *FakeNoaaConsumer) RecentLogsReturns(result1 []*events.LogMessage, result2 error) {
	fake.RecentLogsStub = nil
	fake.recentLogsReturns = struct {
		result1 []*events.LogMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeNoaaConsumer) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeNoaaConsumer) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeNoaaConsumer) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNoaaConsumer) SetOnConnectCallback(cb func()) {
	fake.setOnConnectCallbackMutex.Lock()
	fake.setOnConnectCallbackArgsForCall = append(fake.setOnConnectCallbackArgsForCall, struct {
		cb func()
	}{cb})
	fake.recordInvocation("SetOnConnectCallback", []interface{}{cb})
	fake.setOnConnectCallbackMutex.Unlock()
	if fake.SetOnConnectCallbackStub != nil {
		fake.SetOnConnectCallbackStub(cb)
	}
}

func (fake *FakeNoaaConsumer) SetOnConnectCallbackCallCount() int {
	fake.setOnConnectCallbackMutex.RLock()
	defer fake.setOnConnectCallbackMutex.RUnlock()
	return len(fake.setOnConnectCallbackArgsForCall)
}

func (fake *FakeNoaaConsumer) SetOnConnectCallbackArgsForCall(i int) func() {
	fake.setOnConnectCallbackMutex.RLock()
	defer fake.setOnConnectCallbackMutex.RUnlock()
	return fake.setOnConnectCallbackArgsForCall[i].cb
}

func (fake *FakeNoaaConsumer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tailingLogsWithoutReconnectMutex.RLock()
	defer fake.tailingLogsWithoutReconnectMutex.RUnlock()
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.setOnConnectCallbackMutex.RLock()
	defer fake.setOnConnectCallbackMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNoaaConsumer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logs.NoaaConsumer = new(FakeNoaaConsumer)
