#!/usr/bin/env bash

set -e

if [[ "$OSTYPE" == "darwin14" ]]; then
  tmpdir=/tmp/i18n-checkup-$(uuidgen)
  mkdir -p ${tmpdir}
else
  tmpdir=$(mktemp -d)
fi

function cleanup {
  rm -rf ${tmpdir}
}
trap cleanup EXIT

if [ ! $(which goi18n) ];then
  echo -e "\n Installing go-i18n..."
  go get github.com/nicksnyder/go-i18n/goi18n
fi

echo -e "\n Updating i18n4go..."
go get -u github.com/XenoPhex/i18n4go/i18n4go
if [ $? -ne 0 ]; then
  printf "Failed to run `go get -u github.com/XenoPhex/i18n4go/i18n4go`"
  exit 1
fi


IGNORE_FILES_REGEX=".*test.go|.*resources.go|fake.*\.go|template.go"

i18n4go -c extract-strings -e strings/excluded.json -s strings/specialStrings.json -o ${tmpdir} -d commands -r --ignore-regexp $IGNORE_FILES_REGEX
i18n4go -c extract-strings -e strings/excluded.json -s strings/specialStrings.json -o ${tmpdir} -d cf -r --ignore-regexp $IGNORE_FILES_REGEX
i18n4go -c merge-strings -d ${tmpdir}

i18n4go -c fixup --source-language-file ${tmpdir}/en.all.json

set +e

goi18n -outdir cf/i18n/resources cf/i18n/resources/*.all.json
if [ $? -ne 0 ]; then
  printf "Failed to run `goi18n -outdir cf/i18n/resources cf/i18n/resources/*.all.json`"
  exit 1
fi

if [[ $(git status --porcelain cf/i18n/resources) ]]; then
  bin/generate-language-resources
  if [ $? -ne 0 ]; then
    printf "Failed to run `bin/generate-language-resources`"
    exit 1
  fi
fi

git checkout cf/i18n/resources/en-us.untranslated.json

